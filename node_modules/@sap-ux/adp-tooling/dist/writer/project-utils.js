"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeUI5DeployYaml = exports.writeUI5Yaml = exports.writeTemplateToFolder = void 0;
const path_1 = require("path");
const options_1 = require("./options");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Writes a given project template files within a specified folder in the project directory.
 *
 * @param {string} templatePath - The root path of the project template.
 * @param {string} projectPath - The root path of the project.
 * @param {CfModuleData | AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
function writeTemplateToFolder(templatePath, projectPath, data, fs) {
    try {
        fs.copyTpl(templatePath, projectPath, data, undefined, {
            globOptions: { dot: true },
            processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
        });
    }
    catch (e) {
        throw new Error(`Could not write template files to folder. Reason: ${e.message}`);
    }
}
exports.writeTemplateToFolder = writeTemplateToFolder;
/**
 * Writes a ui5.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
function writeUI5Yaml(projectPath, data, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
            const baseUi5ConfigContent = fs.read(ui5ConfigPath);
            const ui5Config = yield ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
            (0, options_1.enhanceUI5Yaml)(ui5Config, data);
            (0, options_1.enhanceUI5YamlWithCustomConfig)(ui5Config, data === null || data === void 0 ? void 0 : data.customConfig);
            fs.write(ui5ConfigPath, ui5Config.toString());
        }
        catch (e) {
            throw new Error(`Could not write ui5.yaml file. Reason: ${e.message}`);
        }
    });
}
exports.writeUI5Yaml = writeUI5Yaml;
/**
 * Writes a ui5-deploy.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
function writeUI5DeployYaml(projectPath, data, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if ((0, options_1.hasDeployConfig)(data)) {
                const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
                const baseUi5ConfigContent = fs.read(ui5ConfigPath);
                const ui5DeployConfig = yield ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
                (0, options_1.enhanceUI5DeployYaml)(ui5DeployConfig, data);
                fs.write((0, path_1.join)(projectPath, 'ui5-deploy.yaml'), ui5DeployConfig.toString());
            }
        }
        catch (e) {
            throw new Error(`Could not write ui5-deploy.yaml file. Reason: ${e.message}`);
        }
    });
}
exports.writeUI5DeployYaml = writeUI5DeployYaml;
//# sourceMappingURL=project-utils.js.map